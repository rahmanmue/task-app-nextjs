// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  username                String        @unique
  fullname                String
  password                String
  role                    Role          @default(TEAM)
  ledGroups               GroupTask[]   @relation("UserLedGroups")
  assignedTeamTasks       Task[]        @relation("UserAssignedTasks")
  groupMessagesSent       GroupChat[]   @relation("UserChats")
  privateMessagesSent     PrivateChat[] @relation("PrivateChatSender")
  privateMessagesReceived PrivateChat[] @relation("PrivateChatReceiver")
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model GroupTask {
  id        String      @id @default(uuid())
  name      String
  leadId    String
  lead      User        @relation("UserLedGroups", fields: [leadId], references: [id])
  tasks     Task[]      @relation("GroupTasks")
  chats     GroupChat[] @relation("GroupChats")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String
  status      TaskStatus @default(NOT_STARTED)
  groupId     String
  group       GroupTask  @relation("GroupTasks", fields: [groupId], references: [id])
  userTeamId  String
  user        User       @relation("UserAssignedTasks", fields: [userTeamId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model GroupChat {
  id        String    @id @default(uuid())
  username  String
  message   String
  groupId   String
  senderId  String?
  group     GroupTask @relation("GroupChats", fields: [groupId], references: [id], onDelete: Cascade)
  sender    User?     @relation("UserChats", fields: [senderId], references: [id], onDelete: SetNull)
  delivered Boolean
  createdAt DateTime  @default(now())
}

model PrivateChat {
  id         String   @id @default(uuid())
  username   String
  message    String
  senderId   String
  receiverId String?
  sender     User     @relation("PrivateChatSender", fields: [senderId], references: [id])
  receiver   User?    @relation("PrivateChatReceiver", fields: [receiverId], references: [id], onDelete: SetNull)
  delivered  Boolean
  createdAt  DateTime @default(now())
}

model Log {
  id        String    @id @default(uuid())
  action    Action
  tableName TableName
  userId    String?
  taskId    String?
  changes   Json?
  timestamp DateTime  @default(now())
}

enum Role {
  LEAD
  TEAM
}

enum TaskStatus {
  NOT_STARTED
  ON_PROGRESS
  DONE
  REJECT
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum TableName {
  USER
  GROUP_TASK
  TASK
}
